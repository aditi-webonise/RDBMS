DELIMITER $$
DROP PROCEDURE IF EXISTS pay $$
CREATE PROCEDURE pay(IN u_id INT)

BEGIN

DECLARE total_sum  DECIMAL DEFAULT 0;
DECLARE discount INT DEFAULT 0;
DECLARE pay DECIMAL DEFAULT 0;
DECLARE oid INT DEFAULT 0;

DECLARE flag BOOL DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET flag=1;

START TRANSACTION;

SELECT sum((carts.product_quantity * variants.price)) INTO total_sum FROM carts,variants WHERE carts.variant_id = variants.id AND carts.user_id = u_id;

INSERT INTO orders(user_id,order_date,order_status,final_cost,shipping_date,created,updated) VALUES (u_id,now(),'placed',total_sum,now(),now(),now());

SET discount = 5;
SET pay= total_sum-((total_sum*discount)/100);

SELECT id INTO oid FROM orders WHERE orders.user_id = u_id;

INSERT INTO payments (order_id, payment_type,discount_coupon,checkout_price,payment_date, payment_status, created, updated) VALUES (oid,'cash',discount,pay,now(),'pending',now(), now());

UPDATE variants INNER JOIN carts INNER JOIN orders ON variants.id=carts.variant_id SET variants.stock=variants.stock - carts.product_quantity WHERE variants.id=carts.variant_id AND carts.order_id=orders.id AND orders.user_id=u_id;

INSERT INTO order_history SELECT * FROM carts WHERE carts.user_id=u_id;

DELETE FROM carts WHERE carts.user_id=u_id ;

IF flag THEN
	ROLLBACK;
ELSE
  	COMMIT;
END IF;

END$$
DELIMITER ;


