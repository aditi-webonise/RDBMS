
DELIMITER $$

CREATE PROCEDURE payments(IN id int(10),IN order_id int(10),IN payment_type varchar(20),IN discount_coupon decimal(3,2), IN checkout_price decimal(10,2),IN payment_date date,IN payment_status varchar(20), IN created datetime, IN updated timestamp) 


BEGIN
	DECLARE flag BOOL DEFAULT 0;
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET flag=1;
	START TRANSACTION;
	
	
	INSERT INTO 
	payments VALUES (id, order_id, payment_type, discount_coupon,checkout_price,payment_date, payment_status, created, updated);
	
	IF flag THEN
	ROLLBACK;
	ELSE
	COMMIT;
	END IF;

END $$
DELIMITER ;

/////////////////////////////////////////

DELIMITER $$
CREATE PROCEDURE update_final_cost()
BEGIN
DECLARE user_count INT DEFAULT 0;
DECLARE x INTEGER;
DECLARE updated_cost INTEGER;
SET user_count = 1;
SET x = (SELECT COUNT(*) FROM orders);
WHILE(user_count <=  x) DO
  select sum((carts.product_quantity * variants.price)) into updated_cost from carts,variants where carts.variant_id = variants.id AND carts.user_id = user_count;
  UPDATE orders SET orders.final_cost = updated_cost where orders.user_id = user_count;
  SET user_count = user_count + 1;
END WHILE;
END;
$$
DELIMITER ;	

/////////////////////////////

DELIMITER $$
CREATE PROCEDURE set_checkout_price()
BEGIN  

DECLARE discounted_amount DECIMAL DEFAULT 0;
DECLARE cost_cursor DECIMAL DEFAULT 0;
DECLARE discount_cursor DECIMAL DEFAULT 0;
DECLARE x INT DEFAULT 0;
DECLARE itr INT DEFAULT 1;
DECLARE cursor1 CURSOR FOR SELECT final_cost from orders;
DECLARE cursor2 CURSOR FOR SELECT discount_coupon from payments;

DECLARE CONTINUE HANDLER
      FOR NOT FOUND SET x = 1;

OPEN cursor1;
OPEN cursor2;

WHILE(itr< (SELECT COUNT(*) FROM payments)) DO
  FETCH cursor1 INTO cost_cursor;
  FETCH cursor2 INTO discount_cursor;
 
  SET discounted_amount = cost_cursor -discount_cursor;
 
  UPDATE payments SET checkout_price = discounted_amount where payments.order_id = itr;
  SET itr= itr+1;
 
END WHILE;
CLOSE cursor1;
CLOSE cursor2;    
 
END$$
DELIMITER ;
 
//////////////////////////////////////////////////////////

CREATE OR REPLACE VIEW monthly_report AS SELECT o.id,o.order_date,p.product_name,v.price,pa.checkout_price,u.username,u.email FROM orders o, products p, variants v, payments pa, users u, order_history oh WHERE oh.user_id=u.id AND oh.variant_id=v.id AND oh.product_id=p.id AND oh.order_id=o.id AND oh.order_id=pa.order_id;

/////////////////////

CREATE VIEW payment_view AS SELECT o.id, o.final_cost, o.order_date, p.discount_coupon, p.payment_type, p.payment_status FROM orders o, payments p WHERE o.id=p.order_id;





